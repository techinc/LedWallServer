server.js                   - starts the server
                            - sets up communication modules
                            - sets up screen
                            - starts game menu
                
GamePicker.js               - a menu for picking games
                
GameExecuter.js             - Sets up communication with a game and streams its frames to the screen

GameExecuterProtocol.js		- Combines a messenger (that sends and receives messages) and a codec
							  (which translates requests into message data) to form a protocol

HttpProtocol.js				- protocol for communicating with a game

SocketMessenger.js			- Packages, sends, receives and unpackages messages

JSONCodec.js				- encodes and decodes requests


ArduinoScreen.js            - Communicates with the LedWall

RemoteScreen.js             - Encodes setColor commands and sends them to the BrowserScreen of any visitor to {host:port}/screen

public/js/BrowserScreen.js  - a screen that can run in the browser, and can decode RemoteScreen messages

AbstractScreen.js           - Parent prototype for screens (a prototype is sort of a class)     
                            - it stores a representation of the current state of a screen

views/snesController.html   - template for a controller, that also contains javascript for sending controller events to the
                              led wall server
                    
views                       - folder containing all html templates

public                      - folder containing all publicly accessible files

games/                       - folder with the json files describing games and the servers where they can be found, that are actually loaded in the menu

games.dist/                  - folder with the json files describing games and the servers where they can be found/


sampleGames/				 - folder containing some simple demo games, to illustrate what is possible